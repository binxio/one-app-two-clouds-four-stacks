---
AWSTemplateFormatVersion: '2010-09-09'
Description: 01-toh-dynamodb-integration

Resources:
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
          Condition: {}
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  HeroesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: heroes
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: N
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestAPIv5
      StageName: prod

  RestAPIv5:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
        - REGIONAL


      Body:
        swagger: '2.0'
        info:
          description: Tour of Heroes API
          title: Tour Of Heroes
          version: 1.0.0
        schemes:
        - https
        paths:
          /api/search/{name}:
            get:
              summary: Search for heroes
              produces:
              - application/json
              parameters:
              - in: path
                name: name
                type: string
                required: true
              responses:
                '200':
                  description: Return a list of heroes
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Heroes'
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |-
                        [
                        #foreach ($item in $input.path('$.Items'))
                        {
                            "id": "$item.id.N",
                            "name": "$item.name.S"
                        }
                        #if($foreach.hasNext), #end
                        #end
                        ]
                requestTemplates:
                  application/json: !Sub |
                    {
                        "TableName": "${HeroesTable}",
                        "ScanFilter": {
                          "name": {
                            "AttributeValueList":[ {"S":"$input.params('name')"} ],
                             "ComparisonOperator": "CONTAINS"
                          }
                        }
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            options:
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
          /api/heroes:
            get:
              summary: Return a list of heroes
              produces:
              - application/json
              responses:
                '200':
                  description: Return a list of heroes
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Heroes'
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |-
                        [
                        #foreach ($item in $input.path('$.Items'))
                        {
                            "id": "$item.id.N",
                            "name": "$item.name.S"
                        }
                        #if($foreach.hasNext), #end
                        #end
                        ]
                requestTemplates:
                  application/json: !Sub |
                    {
                        "TableName": "${HeroesTable}"
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            post:
              summary: Add a new hero
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - in: body
                name: hero
                required: true
                schema:
                  $ref: '#/definitions/Hero'
              responses:
                '200':
                  description: New hero
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Hero'
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub |
                    {
                        "TableName": "${HeroesTable}",
                        "Item": {
                            "id": {
                                "N": $input.json('$.id')
                            },
                            "name": {
                                "S": $input.json('$.name')
                            }
                        }
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            put:
              summary: Update a hero
              consumes:
              - application/json
              produces:
              - application/json
              parameters:
              - in: body
                name: hero
                required: true
                schema:
                  $ref: '#/definitions/Hero'
              responses:
                '200':
                  description: Updated hero
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Hero'
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub |
                    {
                        "TableName": "${HeroesTable}",
                        "Key": {
                          "id": {
                            "N": $input.json('$.id')
                          }
                        },
                        "UpdateExpression": "SET #n = :p",
                        "ExpressionAttributeValues": {
                          ":p": { "S" : $input.json('$.name') }
                        },
                        "ExpressionAttributeNames": {"#n":"name"}
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            options:
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
          /api/heroes/{id}:
            get:
              summary: get hero by id
              produces:
              - application/json
              parameters:
              - in: path
                name: id
                type: number
                required: true
              responses:
                '200':
                  description: hero is found
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Hero'
                '404':
                  description: hero is not found
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |-
                        #if ($input.body == '{}')
                          $input.body
                        #set($context.responseOverride.status = 404)
                        #else
                        {
                          "id": $input.json('$.Item.id.N'),
                          "name": $input.json('$.Item.name.S')
                        }
                        #end
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${HeroesTable}",
                      "Key": {
                        "id": {
                          "N": "$input.params('id')"
                        }
                      }
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            delete:
              summary: Delete a hero
              parameters:
              - in: path
                name: id
                type: number
                required: true
              responses:
                '200':
                  description: hero is deleted
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  schema:
                    $ref: '#/definitions/Hero'
                '404':
                  description: hero is not found
                  headers:
                    Content-Type:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub |
                    {
                      "TableName": "${HeroesTable}",
                      "Key": {
                        "id": {
                          "N": "$input.params('id')"
                        }
                      }
                    }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
            options:
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |-
                        {}
        definitions:
          Heroes:
            type: array
            items:
              $ref: '#/definitions/Hero'
          Hero:
            type: object
            required:
            - id
            - name
            properties:
              id:
                type: number
              name:
                type: string
Outputs:
  ServiceEndpoint:
    Description: API Endpoint
    Value: !Sub https://${RestAPIv5}.execute-api.${AWS::Region}.${AWS::URLSuffix}/prod
